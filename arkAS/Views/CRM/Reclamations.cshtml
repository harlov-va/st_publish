@{
    ViewBag.Title = "Reclamations";
    Layout = arkAS.BLL.Core.CoreManager.GetCabinetLayout();
    var js = new System.Web.Script.Serialization.JavaScriptSerializer();
}

<div class='reclCont'>
</div>

<div class='StatusesTemplate hide'>
    <input type="checkbox" data-code='nostatus' value='0' /><label>Не установлен</label>&nbsp;&nbsp;&nbsp;&nbsp;
    @foreach (var item in (List<arkAS.BLL.recl_itemStatuses>)ViewBag.ReclamationStatuses)
    {
        <input type="checkbox" data-code='@item.code' value='@item.id' id='svOurSup@(item.id)' /><label for='svOurSup@(item.id)'>@item.name</label>@Html.Raw("&nbsp; &nbsp; &nbsp; &nbsp;")
    }
</div>

@section js{
    <script type="text/javascript">

    var statusesSource = @Html.Raw(js.Serialize(((List<arkAS.BLL.recl_itemStatuses>)ViewBag.ReclamationStatuses).Select(x => new { value = x.id, text = x.name })));
    var projectsSource = @Html.Raw(js.Serialize(((List<arkAS.BLL.tt_projects>)ViewBag.Projects).Select(x => new { value = x.id, text = x.name })));
    var haveWOWSource = [
        { Value : 1, Text : "Нет" },
        { Value : 2, Text : "Да" }
    ]
    var haveWOWSource2 = [ 
        { value : 2, text : "Да" },
        { value : 1, text : "Нет" }
    ]


    var recl = {
        init: function () {
            recl.initMainTable();
            $(document).delegate('.usCreateDoc', 'click', function (e) {
                e.preventDefault();
                recl.createItem();
            });
        },
        initMainTable: function () {
            as.crud.init({
                cont: $('.reclCont'),
                title: 'Reclamations',
                toolbarAdditional: '<a href="#" class="btn btn-primary usCreateDoc">Создать</a>',
                groupOperationsToolbar: '',
                ajaxURLFormat: '/CRM/Reclamations_{0}',
                inlineAjaxURL: "/CRM/ReclamationsInline",
                pageSize: 15,
                cookiePrefix: "as-crud-ReclamationsTable-",
                emptyText: 'Нет элементов',
                createLinkTitle: 'Создать',
                filterLinkTitle: 'Найти',
                filterTitle: 'Фильтрация данных',
                showChecksCol: false,
                showNumsCol: true,
                showToolbar: true,
                showColSettings: false,
                showReplaceTool: false,
                showExcelExport: false,
                additionalSort: false,
                cols: [
                    { code: "id", title: "ID", tooltip: "Идентификатор", isVisible: false, isPK: true, datatype: "int", isRequired: false },
                    {
                        code: "name", title: "Имя", tooltip: "Имя", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: true, callback: null,
                        editable: { type: "text", format: "{0}", callback: function (el, newValue) { } }
                    },
                    {
                        code: "customerText", title: "Комментарий клиента", tooltip: "customerText", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: false, callback: null,
                        editable: { type: "text", format: "{0}", callback: function (el, newValue) { } }
                    },
                    {
                        code: "whatToDo", title: "Что сделано", tooltip: "whatToDo", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: false, callback: null,
                        editable: { type: "text", format: "{0}", callback: function (el, newValue) { } }
                    },
                    {
                        code: "statusName", title: "Статус", tooltip: "StatusName", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: true, callback: null,
                        editable: { type: "select", format: "{0}", source: statusesSource, callback: function (el, newValue) { } }
                    },
                    { code: "statusID", title: "ID статуса", tooltip: "ID статуса", isVisible: false, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: false, callback: null },
                    {
                        code: "created", title: "Дата создания", tooltip: "Дата создания", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: true, callback: null,
                        filter: {  type: "date", format: "dd.mm.yyyy" },
                        editable: { type: "date", format: "dd.mm.yyyy", callback: function (el, newValue) { } }
                    },
                    { 
                        code: "addedBy", title: "Кем добавлен", tooltip: "addedBy", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: true, callback: null
                    },
                    {
                        code: "reportDate", title: "Дата отчета", tooltip: "reportDate", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: true, callback: null,
                        editable: { type: "date", format: "dd.mm.yyyy", callback: function (el, newValue) { } }
                    },
                    {
                        code: "projectName", title: "Проект", tooltip: "projectName", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: false, callback: null,
                        editable: { type: "select", format: "{0}", source: projectsSource, callback: function (el, newValue) { } }
                    },
                    {
                        code: "haveWOWname", title: "WOW текст", tooltip: "haveWOWname", isVisible: true, isPK: false, datatype: "string", isRequired: true, format: "{0}", isSort: false, callback: null,
                        filter: { type: "select", source: haveWOWSource, notSelected: "Не выбрано" },
                        editable: { type: "select", format: "{0}", source: haveWOWSource2, callback: function (el, newValue) { } }
                    }
                ],
                operations: {
                    create: false,
                    remove: false,
                    edit: false,
                    other: [
                    ]
                },
                getFilterMakeup: function (filter) {
                    var s = [];
                    $('.StatusesTemplate input').removeAttr('checked');
                    if (filter.statusIDs) {
                        $.each(filter.statusIDs, function (i, item) {
                            $('.StatusesTemplate input[value=' + item + ']').attr('checked', 'checked');
                        })
                    }
                    s.push("<span class='gCap'>Статус</span><div class='Statuses'>" + $('.StatusesTemplate').html() + "</div><br />");
                    return s.join("");
                },
                filter: function () {
                    var statusIDs = [];
                    $('.Statuses input:checked').each(function () {
                        statusIDs.push($(this).attr('value'));
                    });

                    var filter = {
                        statusIDs: statusIDs
                    };
                    return filter;
                },

            });
        },
        createItem: function () {
            var s = [];
            s.push("<span>Имя</span><input type='text' class='form-control NewName' /><br />");

            $('.StatusesTemplate option').removeAttr('selected');
            $('.StatusesTemplate option:first').attr('selected', 'selected');
            s.push("<span>Статус</span><select class='form-control NewStatusID' >");
            var i = 0;
            $('.StatusesTemplate label').each(function() {
                s.push("<option value='" + i + "'>" + $(this).text() + "</option>");
                i++;
            });
            s.push("</select><br />");
            s.push("<span>Текст клиента</span><input type='text' class='form-control NewCustomerText' /><br />");
            s.push("<span>WOW текст</span><select class='form-control NewHaveWOW'><option value='1'>Да</option><option value='0'>Нет</option></select><br />");
            s.push("<span>Проект</span><select class='form-control NewProject'>");
            $.each(projectsSource, function(index, value)
            {
                s.push("<option value='" + value.value + "'>" + value.text + "</option>");
            });
            s.push("</select><br />");
            s.push("<span>Дата отчета</span><input type='text' class='form-control' id='NewReportDate' />");
            
            setTimeout(function () { $('.NewName').focus(); }, 200);
            as.sys.showDialog("Создание", s.join(""), "Сохранить", function () { 
                var newName = $('.NewName').val();
                var statusID = $('.NewStatusID option:selected').val();
                var newCustomerText = $('.NewCustomerText').val();
                var NewHaveWOW = $('.NewHaveWOW').val();
                var NewProject = $('.NewProject').val();
                var NewReportDate = $('#NewReportDate').val();
                if (!newName) {
                    as.sys.bootstrapAlert("Укажите пожалуйста имя", { type: 'warning' });
                    $('.NewName').focus();
                    return;
                }
                if (!statusID || statusID == 0) {
                    as.sys.bootstrapAlert("Укажите пожалуйста статус", { type: 'warning' });
                    $('.NewStatusID').focus();
                    return;
                }
                if (!NewHaveWOW) {
                    as.sys.bootstrapAlert("Укажите пожалуйста есть ли текст WOW", { type: 'warning' });
                    $('.NewHaveWOW').focus();
                    return;
                }
                if (!NewProject || NewProject == 0) {
                    as.sys.bootstrapAlert("Укажите пожалуйста проект", { type: 'warning' });
                    $('.NewProject').focus();
                    return;
                }
                if (!NewReportDate) {
                    as.sys.bootstrapAlert("Укажите пожалуйста NewReportDate", { type: 'warning' });
                    $('#NewReportDate').focus();
                    return;
                }

                var params = {
                    name: newName,
                    statusID: statusID,
                    customerText: newCustomerText,
                    haveWOW: NewHaveWOW,
                    projectID: NewProject,
                    reportDate: NewReportDate
                };

                as.sys.ajaxSend("/CRM/CreateReclamation", params, function (data) {
                    if (typeof (data) != "object") data = eval('(' + data + ')');
                    if (data.result) {
                        as.sys.bootstrapAlert("Элемент сохранен", { type: 'success' });
                        as.sys.closeDialog();
                        as.crud.getItems();
                        setTimeout(function () {
                            as.crud.gotoItem(data.textID);
                        }, 1000);
                    } else {
                        as.sys.bootstrapAlert(data.msg || "Возникли ошибки при выполнении операции!", { type: 'danger' });
                    }
                });
            }, false, function () {$('#NewReportDate').datepicker({ dateFormat: 'dd.mm.yy' });
            });
        },
    }
    $(function () {
        recl.init();
    });
</script>

}


