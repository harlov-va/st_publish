@{
    ViewBag.Title = "Примеры LESS";
}
<hr />
<h3>Что такое LESS?</h3>
<br />
LESS – это надстройка над CSS. Это значит, что любой CSS код – это валидный LESS, но дополнительные элементы LESS не будут 
работать в простом CSS. Это замечательно, потому что существующий CSS уже является работоспособным LESS кодом, что уменьшает порог 
вхождения в новую технологию.
LESS добавляет много нужных динамических свойств в CSS. Он вводит переменные, операции, function-like элементы и примеси.
 Возможность писать таблицы стилей модульно избавит вас от многих хлопот.
<br />
<br />
<h3>Как использовать LESS</h3>
<br />
Есть два способа использования LESS. Вы можете создать LESS файл и конвертировать его при помощи Javascript на лету или скомпилировать 
его заранее и использовать получившийся CSS файл.
<br />
<br />
<h4>Используем LESS и Javascript файл</h4>
Для начала нужно скатать с "<a href="http://lesscss.org/">сайта LESS</a>" Javascript файл и привязать его к страничке как любой другой js скрипт.
<br />
<br />
<pre>
     &ltscript src="less.js" type="text/javascript">&lt/script>
</pre>
<br />
Затем создадим файл с расширением .less и привяжем его с помощью такого кода:
<br />
<br />
<pre>
     &ltlink rel="stylesheet/less" type="text/css" href="style.less">
</pre>
<br />
Удостоверьтесь, что вы прикрепили LESS файл перед JS. Теперь LESS файл будет работать также как и обычный CSS.
<br />
<br />
<h4>Компилируем LESS файл</h4>
Хотя этот способ немного утомительней, но иногда он является более предпочтительным. 
Чтобы не конвертировать код при каждой загрузке страницы можно использовать результирующий CSS файл. 
Конвертеры: для Windows – "<a href="http://winless.org/">Winless</a>" и "<a href="http://incident57.com/less/">LESS.app</a>" для Мака."
<br />
<br />
<h3>Описание кода LESS с примерами</h3>
<br />
<h4>Переменные</h4>
Переменные в LESS работают так же как в PHP, JS и в большинстве других языков программирования. Вы можете использовать их для хранения значения,
 и затем использовать переменные вместо самого значения всякий раз, когда вам это нужно.
<br />
<br />
<pre>
    @@header-font: Georgia;
    h1, h2, h3, h4 {
        font-family: @@header-font;
    }
    .large {
        font-family:@@header-font;
    }
</pre>
<br />
В примере выше мы объявляем переменную @@header-font и записываем туда значение «Georgia». Теперь мы можем использовать 
эту переменную всегда, когда мы хотим установить шрифт Georgia. Если же мы решим, что Trebuchet MS лучше подходит для наших заголовков,
 то нам не нужно будет просматривать весь файл, мы просто изменим значение переменной.
<br />
<br />
<h4>Область видимости переменных</h4>
Область видимости переменных описывает места, где они доступны. Если вы определите переменную в самом начале LESS файла,
 то она будет доступна для любого кода написанного после.
Также можно определять переменную внутри CSS правила. В этом случае переменные не будут доступны вне этого правила,
 они могут быть использованы локально.
<br />
<br />
<pre>
    a {
        @@color: #ff9900;
        color:@@color;
    }
    button {
        background: @@color;
    }
</pre>
<br />
В этом примере LESS не будет сконвертирован из-за ошибки, @@color не определена для использования внутри элемента button. 
Если переменная объявлена вне элемента и внутри другого элемента, то она будет доступна только локально.
<br />
<br />
<pre>
    @@color: #222222;
    a {
        @@color: #ffffff;
        color:@@color;
    }
    button {
        background: @@color;
    }
</pre>
<br />
Здесь ссылка будет окрашена в белый, а у кнопки будет черный фон.
<br />
<br />
<h4>Константы и Переменные</h4>
Важно отметить, вопреки тому, что вы только что прочитали, переменные в LESS больше похожи на константы. Это значит, что они,
 в отличие от переменных, могут быть определены только один раз.
<br />
<br />
<h4>Операции</h4>
Вы можете добиться невероятно точного контроля с использованием операций в LESS.Код выше устанавливает переменную @@unit в 3px. 
Затем мы устанавливаем это значение в ширину рамки, отступы в три раза больше этой ширины, а поля – в два.
Можно использовать операции умножения, деления, сложения и вычитания. Примеры описаны ниже.
<br />
<br />
<pre>
    .button{
        @@unit: 3px;
        border:@@unit solid #ddd;
        padding: @@unit * 3;
        margin: @@unit * 2;
    }

    .box{
        @@base_unit: 1px;
        border: @@base_unit @@base_unit + 1 @@base_unit + 2 @@base_unit + 3
    }
</pre>
<br />
<h4>Управление цветом</h4>
Если вы хотите изменить значение цвета, то можете сделать это вычитанием или добавлением другого цвета.
<br />
<br />
<pre>
    @@color: #941f1f;
    button {
        background: #941f1f + #222222;
        border: #941f1f - #111111;
    }
</pre>
<br />
Вышеприведённая операция с фоном увеличит каждое значение HEX на 2. Результатом будет “B64141″ — более светлый вариант оригинального цвета. 
Операция с рамкой уменьшит каждое значение HEX на 1 и выдаст более темный цвет: “830E0E”.
На практике есть немало случаев, когда мы начинаем с базового цвета и нуждаемся в слегка затемненном или осветленном его варианте.
<br />
<br />
<pre>
    @@color-button: #d24444;
    input.submit {
        color:#fff;
        background:@@color-button;
        border:1px solid @@color-button - #222;
        padding:5px 12px;
    }
</pre>
<br />
Этот код создает красную кнопку с немного затемненной рамкой. Это частая ситуация и определение лишь одного цвета – большая помощь.
<img src="http://d3pr5r64n04s3o.cloudfront.net/tuts/225_less/red_button.png" alt="image">
<br />
<br />
Если нужно изменить цвет кнопки, то достаточно изменить значение @@color-button на зеленый цвет.
<br />
<img src="http://d3pr5r64n04s3o.cloudfront.net/tuts/225_less/green_button.png" alt="image">
<br />
<br />
<h4>Цветовые функции</h4>
Есть гораздо больше возможностей для работы с цветом. LESS позволяет манипулировать ими на канальном уровне. 
Вы можете осветлять, затемнять, насыщать, обесцвечивать и вращать цвета. Взгляните на следующие примеры с картинками, 
чтобы понять, что каждый из них делает.
<br />
<br />
<pre>
    @@color: #3d82d1;
    .left_box {
        background:lighten(@@color, 20%);
    }
    .right_box {
        background:darken(@@color, 20%);
    }
</pre>
<img src="http://d3pr5r64n04s3o.cloudfront.net/tuts/225_less/colors_lightness.jpg" alt="image"/>
<br />
<br />
<pre>
    @@color: #3d82d1;.left_box {
        background: desaturate(@@color, 18%);
    }
    .middle_box {
        background: @@color;
    }
    .right_box {
        background: saturate(@@color, 18%);
    }
</pre>
<img src="http://d3pr5r64n04s3o.cloudfront.net/tuts/225_less/colors_saturation.jpg" alt="image"/>
<br />
<br />
<pre>
    @@color: #3d82d1;.left_box {
        background: spin(@@color, 25%);
    }
    .middle_box {
        background: @@color;
    }
    .right_box {
        background: spin(@@color, -25%);
    }
</pre>
<img src="http://d3pr5r64n04s3o.cloudfront.net/tuts/225_less/colors_spin.jpg" alt="image" />
<br />
<br />
<h4>Совмещение функций</h4>
LESS позволяет использовать функции внутри функций, так, если надо обесцветить и перевернуть (spin) цвет, можно просто сделать так:
<br />
<br />
<pre>
    @@color: #c480bd;
    .class {
        background-color: desaturate(spin(@@color, 18), 12%);
    }
</pre>
<br />
<h4>Вложенность</h4>
Во время написания CSS мы пользуемся каскадностью стилей. Чтобы изменить поля у параграфа только внутри статьи можно использовать следующий код:
<br />
<br />
<pre>
    article.post p{
        margin: 0 0 12px 0;
    }
</pre>
<br />
Нет ничего плохого в таком подходе, но если нам надо также изменить стиль ссылок, цитат, заголовков и т.д. только внутри статьи, 
нужно будет использовать префикс “article.post” для каждого элемента. Это делает написание кода более скучным и усложняет его чтение.
<br />
<br />
<h4>Примеси (mixins)</h4>
Примеси в LESS избавят вас от набора излишнего кода. Вам когда-нибудь приходилось создавать закругленную рамку в которой 
только верхние углы скругленны?
<br />
<br />
<pre>
    .tab {
        -webkit-border-top-left-radius: 6px;
        -webkit-border-top-right-radius: 6px;
        -moz-border-radius-topleft: 6px;
        -moz-border-radius-topright: 6px;
        border-top-left-radius: 6px;
        border-top-right-radius: 6px;
    }
</pre>
<br />
И так каждый раз… С LESS все это можно изменить, создав примесь. Примеси – элементы многоразового использования,
 которые можно добавить к любому элементу как правило. И даже не нужно изучать новый синтаксис.
<br />
<br />
<pre>
    .rounded_top {
        -webkit-border-top-left-radius: 6px;
        -webkit-border-top-right-radius: 6px;
        -moz-border-radius-topleft: 6px;
        -moz-border-radius-topright: 6px;
        border-top-left-radius: 6px;
        border-top-right-radius: 6px;
    }
    .tab {
        background: #333;
        color:#fff;
        .rounded_top;
    }
    .submit {
        .rounded_top;
    }
</pre>
<br />
В вышеприведенном коде мы определили элемент .rounded_top для округления верхних углов. 
Когда мы добавляем его к любому другому элементу как примесь (смотрите .tab) мы по существу импортируем правила,
 которые мы создали для него. Благодаря такому синтаксису мы можем использовать любой элемент в качестве примеси.
<br />
<br />
<h4>Экранирование</h4>
Иногда нужно использовать свойства или значения, которые не являются валидным CSS (правила для IE). 
Если вы хотите создать градиент в IE, вы должны сделать что-то вроде этого:
<br />
<br />
<pre>
    filter:  progid:DXImageTransform.Microsoft.gradient(startColorstr='#666666', endColorstr='#444444');
</pre>
<br />
Этот CSS не валиден, поэтому LESS не скомпилируется. В этом случае вы можете экранировать это значение, что позволит LESS пропустить его.
<br />
<br />
<pre>
    .button {
        background: -webkit-gradient(linear, left top, left bottom, from(#666666), to(#444444));
        background: -moz-linear-gradient(top,  #666666,  @@color - #444444);
        filter:  ~"progid:DXImageTransform.Microsoft.gradient(startColorstr='#666666', endColorstr='#444444')";}
</pre>
<br />
Все что нужно сделать, это заключить секцию в кавычки и поставить тильду перед ней. Эта секция не пройдет через LESS процессор и не будет выкинута.
<br />
<br />
<h4>Импорт</h4>
Как и в обычном CSS вы можете импортировать файлы. LESS позволяет импортировать CSS и LESS используя следующий синтаксис:
<br />
<br />
<pre>
    @@import "reset.min.css";
    @@import "framework.less";
    @@import "widgets";
</pre>
<br />
Первый импорт достаточно очевиден. Он импортирует CSS правила определённые в reset.min.css без обработки их LESS парсером.
Второй импорт вставит содержание framework.less и обработает его как любые другие LESS правила.
Третий импорт работает также как и второй. Если расширение не установлено, то препроцессор считает его LESS файлом.
<br />
<br />
<h4>Комментарии</h4>
Естественно, многострочные комментарии доступны в LESS в таком же виде, как и в CSS. 
Также LESS разрешает использование однострочных комментариев как в PHP или Javascript, с помощью двойного обратного слеша.
<br />
<br />
<pre>
    /*
    This is my main LESS file.
    It governs how most of the site looks.
    /*
    body {
        padding:0px; // This resets the body padding
    }
</pre>
<br />
<br />

