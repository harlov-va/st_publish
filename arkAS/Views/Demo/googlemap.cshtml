@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Google Map";
    var js = new System.Web.Script.Serialization.JavaScriptSerializer();
}
@section css {
    <style>
    #map {
    width:100%;height:500px;padding-top:10px;
    }
    .as-cap {
    width:250px; height:27px
    }
    </style>
}

<div id="map"></div>

<div class="form-group" id="locationField" >

    <div class="as-form-cap">
        <span class="as-cap">Откуда</span><input id="autocomplete" class="geolocate" type="text" placeholder="Введите адрес" />
    </div><br><br>
    <div class="as-form-cap">
        <span class="as-cap">Куда</span><input id="autocomplete2" class="geolocate" type="text" placeholder="Введите адрес" />
    </div><br><br>
    <div class="as-form-cap">
        <span class="as-cap">Тип маршрута</span>
        <select id="mode">
            <option value="DRIVING">Машина</option>
            <option value="WALKING">Пешком</option>
            <option value="BICYCLING">Велосипед</option>
            <option value="TRANSIT">Общ. транспорт</option>
        </select>
    </div><br><br>
    <input type="button" id="calcRoute" value="Показать маршрут" class="btn btn-primary" />
</div>

@section js{
<script>
    var polyline;
    var directionDisplay;
    var directionsService;
    var map;
    var searchBox;
    var searchBox2;
    var places;
    var places2;

    var gm = {
        options: {
            markers : [],
            markers2: [],
            input: document.getElementById('autocomplete'),
            input2: document.getElementById('autocomplete2'),
            selectedMode: document.getElementById('mode')
        },
        init: function () {
            gm.initMap();

            $(document).delegate('.geolocate', 'focus', function (e) {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (position) {
                        var geolocation = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        var circle = new google.maps.Circle({
                            center: geolocation,
                            radius: position.coords.accuracy
                        });
                        if ($(this) == document.getElementById('autocomplete')) { autocomplete.setBounds(circle.getBounds()); }
                        else { autocomplete2.setBounds(circle.getBounds()); }
                    });
                }
            }),

            $(document).delegate('#mode', 'onchange', function (e) {
                gm.options.selectedMode = document.getElementById('mode');
            }),

            $(document).delegate('#calcRoute', 'click', function (e) {
                if (gm.options.selectedMode.value == "DRIVING" || gm.options.selectedMode.value == "WALKING" ||
                gm.options.selectedMode.value == "BICYCLING" || gm.options.selectedMode.value == "TRANSIT") {
                    if (gm.options.input.value == "") {
                        as.sys.bootstrapAlert("Укажите пожалуйста место отправления", { type: 'warning' });
                        $('#autocomplete').focus();
                        return;
                    }
                    if (gm.options.input2.value == "") {
                        as.sys.bootstrapAlert("Укажите пожалуйста место назначения", { type: 'warning' });
                        $('#autocomplete2').focus();
                        return;
                    }
                    if (places.length > 1) {
                        as.sys.bootstrapAlert("Укажите пожалуйста одно место отправления", { type: 'warning' });
                        $('#autocomplete').focus();
                        return;
                    }
                    if (places2.length > 1) {
                        as.sys.bootstrapAlert("Укажите пожалуйста одно место назначения", { type: 'warning' });
                        $('#autocomplete2').focus();
                        return;
                    }
                    gm.options.markers.forEach(function (marker) {
                        marker.setMap(null);
                    });
                    gm.options.markers2.forEach(function (marker) {
                        marker.setMap(null);
                    });
                    polyline.setMap(null);
                    directionsDisplay.setMap(null);
                    polyline = new google.maps.Polyline({
                        path: [],
                        strokeColor: '#FF0000',
                        strokeWeight: 3
                    });

                    var rendererOptions = {
                        map: map
                    }
                    directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
                    directionsService = new google.maps.DirectionsService();

                    var start;
                    var end;
                    places.forEach(function (place) {
                        start = place.geometry.location;
                    });
                    places2.forEach(function (place) {
                        end = place.geometry.location;
                    });

                    var travelMode = google.maps.TravelMode[gm.options.selectedMode.value]

                    var request = {
                        origin: start,
                        destination: end,
                        travelMode: travelMode
                    };

                    directionsService.route(request, function (response, status) {
                        if (status == google.maps.DirectionsStatus.OK) {             
                            directionsDisplay.setDirections(response);
                            var bounds = new google.maps.LatLngBounds();
                            polyline.setMap(map);
                            map.fitBounds(bounds);
                            map.setZoom(15); 
                        } else {
                            if (status == google.maps.DirectionsStatus.ZERO_RESULTS) {
                                if (travelMode == "BICYCLING") {
                                    as.sys.bootstrapAlert("Извините, мы не смогли просчитать ваш маршрут, так как отсутствует велосипедная карта для данной местности", { type: 'warning' });
                                    return;
                                } else {
                                    as.sys.bootstrapAlert("Извините, мы не смогли просчитать ваш маршрут", { type: 'warning' });
                                    return;
                                }
                            }
                        }
                    });
                } else {
                    as.sys.bootstrapAlert("Вы пытались использовать неверный тип маршрута", { type: 'warning' });
                    $('#mode').focus();
                    return;
                }   
            });            
        },
        initMap: function () {
            var mapCanvas = document.getElementById("map");
            var myCenter = new google.maps.LatLng(52.28527738699868, 104.31016662597656);
            var mapOptions = { center: myCenter, zoom: 13, scrollwheel: false };
            map = new google.maps.Map(mapCanvas, mapOptions);
            var rendererOptions = {
                map: map
            }
            directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
            polyline = new google.maps.Polyline({
                path: [],
                strokeColor: '#FF0000',
                strokeWeight: 3
            });

            autocomplete = new google.maps.places.Autocomplete(
                (document.getElementById('autocomplete')),
                { types: ['geocode'] });
            autocomplete2 = new google.maps.places.Autocomplete(
                (document.getElementById('autocomplete2')),
                { types: ['geocode'] });

            searchBox = new google.maps.places.SearchBox(gm.options.input);
            searchBox2 = new google.maps.places.SearchBox(gm.options.input2);

            map.addListener('bounds_changed', function () {
                searchBox.setBounds(map.getBounds());
                searchBox2.setBounds(map.getBounds());
            });

            searchBox.addListener('places_changed', function () {
                places = searchBox.getPlaces();
                if (places.length == 0) {
                    return;
                }

                gm.options.markers.forEach(function (marker) {
                    marker.setMap(null);
                });
                gm.options.markers = [];

                var bounds = new google.maps.LatLngBounds();
                places.forEach(function (place) {
                    var icon = {
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(17, 17)
                    };

                    gm.options.markers.push(new google.maps.Marker({
                        map: map,
                        icon: icon,
                        title: place.name,
                        position: place.geometry.location
                    }));

                    if (place.geometry.viewport) {
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                });
                map.fitBounds(bounds);
                map.setZoom(15);
            });

            searchBox2.addListener('places_changed', function () {
                places2 = searchBox2.getPlaces();
                if (places2.length == 0) {
                    return;
                }

                gm.options.markers2.forEach(function (marker) {
                    marker.setMap(null);
                });
                gm.options.markers2 = [];

                var bounds = new google.maps.LatLngBounds();
                places2.forEach(function (place) {
                    var icon = {
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(17, 17)
                    };

                    gm.options.markers2.push(new google.maps.Marker({
                        map: map,
                        icon: icon,
                        title: place.name,
                        position: place.geometry.location
                    }));

                    if (place.geometry.viewport) {
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                });
                map.fitBounds(bounds);
                map.setZoom(15);
            });
        }
    }

    $(function () {
        gm.init({ appendTo: '#map' });
    });
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDn5ykCBjVOXWSRNxTEZ8UP6xpSdAXeu78&libraries=places" type="text/javascript"></script>
}