@using arkAS.Models;
@{
    Layout = arkAS.BLL.Core.CoreManager.GetCabinetLayout();
    ViewBag.Title = "Процесс элемент";
    var js = new System.Web.Script.Serialization.JavaScriptSerializer();
}

<div class='usRolesTemplate hide'>

    @foreach (var item in Roles.GetAllRoles())
    {
        <input type="checkbox" value='@item' id='svOurSup@(item)' /><label for='svOurSup@(item)'>@item</label>@Html.Raw("&nbsp; &nbsp; &nbsp; &nbsp;")
    }
</div>
                            
<div class='usCont'>
</div>
@section js{

    <script type="text/javascript">

        var sourceIsFinishEdit = [{ value: 1, text: "true" }, { value: 0, text: "false" }];
        var listsSource = @Html.Raw(js.Serialize(((Dictionary<int, string>) ViewBag.Items).Select(x => new {value = x.Key, text = x.Value})));
        var listsSourceFilter = @Html.Raw(js.Serialize(((Dictionary<int, string>) ViewBag.Items).Select(x => new {Value = x.Key, Text = x.Value})));
        var sourseUserCurrent = @Html.Raw(js.Serialize(Membership.GetUser(User.Identity.Name)));
        var usersSource = @Html.Raw(js.Serialize(((List<string>) ViewBag.Users).Select(x => new {text = x})));

        var indexVal = 0;
        var indexCurentUser = -1;
        $.each(usersSource, function() {
            usersSource[indexVal].value = indexVal;
            if (usersSource[indexVal].text == sourseUserCurrent.UserName) {
                indexCurentUser = usersSource[indexVal].value;
            }
            indexVal++;
        });

        var asdemo = {
            init: function() {
                asdemo.initMainTable();
                $(document).delegate('.usCreateDoc', 'click', function(e) {
                    e.preventDefault();
                    asdemo.createItem();
                });
                $(document).delegate('.usCont .usUserRoles input[type=checkbox]', 'change', function(e) {
                    e.preventDefault();
                    var div = $(this).parent('div');
                    var s = "";
                    $.each($(div).find('input[type="checkbox"]:checked'), function() {
                        s += $(this).val() + ",";
                    });
                    s = s.slice(0, s.length - 1);
                    var tr = $(this).closest('tr');
                    var params = {
                        pk: tr.attr('data-itemID'),
                        roles: s
                    };
                    as.sys.ajaxSend("/Admin/ChangeRoleForProcessItem", params, function(data) {
                        if (typeof (data) != "object") data = eval('(' + data + ')');

                        if (data.result) {
                            as.sys.bootstrapAlert("Роль изменена", { type: 'success' });
                        } else {
                            as.sys.bootstrapAlert("Возникли ошибки при выполнении операции!", { type: 'danger' });
                        }
                    });
                });
            },
            initMainTable:
                function() {
                    as.crud.init({
                        cont: $('.usCont'),
                        title: 'Процесс-элементы',
                        toolbarAdditional: '<a href="#" class="btn btn-primary usCreateDoc">Создать</a>',
                        groupOperationsToolbar: '',
                        ajaxURLFormat: '/Admin/ProcessItem_{0}',
                        inlineAjaxURL: "/Admin/processItemInline",
                        pageSize: 10,
                        cookiePrefix: "as-crud-processItemTable-",
                        emptyText: 'Нет элементов',
                        createLinkTitle: 'Создать',
                        filterLinkTitle: 'Найти',
                        filterTitle: 'Фильтрация данных',
                        showChecksCol: false,
                        showNumsCol: true,
                        showToolbar: true,
                        showColSettings: false,
                        showReplaceTool: false,
                        showExcelExport: false,
                        additionalSort: false,
                        cols: [
                            {
                                 code: "id", title: "ID", tooltip: "Идентификатор", isVisible: false, isPK: true, datatype: "int", isRequired: false},
                            {
                                code: "processName", title: "Имя процесса", tooltip: "Процесс", isVisible: true, isPK: false, datatype: "select", isRequired: false, format: "{0}", isSort: false,callback: null,
                                filter: { type: "select", source: listsSourceFilter, notSelected: "Не выбрано" },
                                editable: { type: "select", format: "{0}", source: listsSource, callback: function(el, newValue) {} }
                            },
                            {
                                 code: "processID", title: "processID", tooltip: "processID", isVisible: false, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: false, callback: null},
                            {
                                code: "name", title: "Имя задачи", tooltip: "Задачи", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: false, callback: null, 
                                editable: { type: "text", format: "{0}", callback: function(el, newValue) {} }
                            },
                            {
                                code: "desc", title: "Описание", tooltip: "Описание", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: false, callback: null, 
                                editable: { type: "text", format: "{0}", callback: function(el, newValue) {} }
                            },
                            {
                                 code: "roles", title: "Роли", tooltip: "Роли", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: false, callback: null},
                            {
                                code: "users", title: "Пользователи", tooltip: "Пользователи", isVisible: true, isPK: false, datatype: "string", isRequired: true, format: "{0}", isSort: false, callback: null,
                                editable: { type: "checklist", source: usersSource, format: "{0}", callback: function(el, newValue) {} }
                            },
                            {
                                code: "usersID", title: "usersID", tooltip: "usersID", isVisible: false, isPK: false, datatype: "string", isRequired: true, format: "{0}", isSort: false, callback: null},
                            {
                                code: "isFinish", title: "Результат", tooltip: "Результат", isVisible: true, isPK: false, datatype: "bit", isRequired: false, format: "{0}", isSort: false, callback: null,
                                editable: { type: "select", format: "{0}", source: sourceIsFinishEdit, callback: function(el, newValue) {} }
                            },
                            {
                                code: "color", title: "Цвет", tooltip: "Цвет", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: false, callback: null, 
                                editable: { type: "text", format: "{0}", callback: function(el, newValue) {} }
                            },
                            {
                                code: "ord", title: "Сортировка", tooltip: "Сортировка", isVisible: true, isPK: false, datatype: "int", isRequired: false, format: "{0}", isSort: false, callback: null,
                                editable: { type: "number", format: "{0}", callback: function(el, newValue) {} }
                            }
                        ],
                        operations: {
                            create: false,
                            remove: true,
                            edit: false,
                            other: [
                            ]
                        },
                        getFilterMakeup: function(filter) {
                            var s = [];
                            s.push("<div class='crdFilterItem'>");
                            s.push("<span class='gCap'>Имя задачи</span><input type='text' class='usName' value='" + (filter.nameTask || '') + "' /><br /><br />");
                            s.push("</div>");
                            s.push("<div class='crdFilterItem'>");
                            s.push("<span class='gCap'>Описание</span><input type='text' class='usDesc' value='" + (filter.desc || '') + "' /><br /><br />");
                            s.push("</div>");
                            s.push("<div class='crdFilterItem'>");
                            s.push("<span class='gCap'>Порядок сортировки</span><input type='text' class='ordFilter' value='" + (filter.ord || '') + "' /><br />");
                            s.push("</div><br />");
                            return s.join("");
                        },
                        filter: function() {
                            var processID = 0;
                            var ordFilter = $('.ordFilter').val();
                            if (typeof(ordFilter) != "undefined" && ordFilter != "") {
                                if (!$.isNumeric(ordFilter)) {
                                    as.sys.bootstrapAlert("Порядок сортировки должен быть целым числом", { type: 'warning' });
                                    $('.ordFilter').focus();
                                    return;
                                }
                            } 
                            var filter = {
                                processID: processID,
                                ord: ordFilter || "",
                                nameTask: $('.usName').val() || "",
                                desc: $('.usDesc').val() || ""
                            };
                            return filter;
                        },
                        getItemsCallback: function() {
                            $('.usCont .usUserRoles').each(function() {
                                var roles = ("," + $(this).text() + ",").split(",");
                                $('.usRolesTemplate input').removeAttr("checked");
                                $('.usRolesTemplate input').each(function() {
                                    if ($.inArray($(this).val(), roles) >= 0) {
                                        $(this).attr("checked", "checked");
                                    }
                                });
                                $(this).html($('.usRolesTemplate').html());
                            });
                        }
                    });
                },
            createItem: function() {
                var s = [];
                s.push('<span>Название задачи</span><input type="text" class="form-control NewItemName"/><br />');
                s.push('<span>Процесс</span><select class="form-control NewProcessName"><option value="0" selected="selected">Не выбрано</option>');
                $.each(listsSource, function(index, value) {
                    s.push('<option value="' + value.value + '">' + value.text + '</option>');
                });
                s.push('</select><br />');
                s.push('<span>Описание</span><input type="text" class="form-control NewItemDesc"/><br />');
                s.push('<span>Результат</span><select class="form-control NewItemIsFinish"><option value="false" selected="selected">Не выбрано</option>');
                $.each(sourceIsFinishEdit, function(index, value) {
                    s.push('<option value="' + value.value + '">' + value.text + '</option>');
                });
                s.push('</select><br />');
                s.push('<span>Цвет</span><input type="text" class="form-control NewItemColor"/><br />');
                s.push("<span>Порядок сортировки</span><input type='text' class='form-control NewOrd' /><br />");
                s.push("<span>Пользователи</span><br><a href='#' id='NewUsers' data-value='" + indexCurentUser + "' class='editable-unsaved' data-type='checklist' data-pk='1' data-title='Пользователи'></a>");
                $('.usRolesTemplate input').removeAttr("checked");
                s.push("<br><br><span>Роли</span><br><div href='#' id='NewRoles''>" + $('.usRolesTemplate').html() + "</div>");

                setTimeout(function() { $('.NewItemName').focus(); }, 200);
                as.sys.showDialog("Создание", s.join(""), "Сохранить", function() {
                    var newName = $('.NewItemName').val();
                    var newProcessID = $('.NewProcessName option:selected').val();
                    var newOrd = $('.NewOrd').val();
                    var newDesc = $('.NewItemDesc').val();
                    var newUsers = $('#NewUsers').html();
                    var rezItemIsFinish = $('.NewItemIsFinish').val();

                    if (rezItemIsFinish == "1") {
                        var newIsFinish = 'true';
                    } else {
                        var newIsFinish = 'false';
                    }
                    
                    var newColor = $('.NewItemColor').val();
                    var newRoles = "";

                    $.each($('#NewRoles input[type="checkbox"]:checked'), function() {
                        newRoles += $(this).val() + ",";
                    });
                    newRoles = newRoles.slice(0, newRoles.length - 1);
                    
                    if (!newName) {
                        as.sys.bootstrapAlert("Укажите пожалуйста имя задачи", { type: 'warning' });
                        $('.NewItemName').focus();
                        return;
                    }
                    if (!newProcessID || newProcessID == 0) {
                        as.sys.bootstrapAlert("Выберете пожалуйста процесс", { type: 'warning' });
                        $('.NewProcessName').focus();
                        return;
                    }
                    if (!newDesc) {
                        as.sys.bootstrapAlert("Укажите пожалуйста описание", { type: 'warning' });
                        $('.NewItemDesc').focus();
                        return;
                    }
                    if (!newColor) {
                        as.sys.bootstrapAlert("Укажите пожалуйста цвет", { type: 'warning' });
                        $('.NewItemColor').focus();
                        return;
                    }
                    if (!newOrd) {
                        as.sys.bootstrapAlert("Укажите пожалуйста порядок сортировки", { type: 'warning' });
                        $('.NewOrd').focus();
                        return;
                    }
                    var pos = newOrd.indexOf(".");
                    if (!$.isNumeric(newOrd) || pos != -1 || newOrd != Math.round(newOrd)) {
                        as.sys.bootstrapAlert("Порядок сортировки должен быть целым числом", { type: 'warning' });
                        $('.NewOrd').focus();
                        return;
                    }
                    if (!newUsers) {
                        as.sys.bootstrapAlert("Укажите пожалуйста пользователей", { type: 'warning' });
                        return;
                    }
                    if (!newRoles) {
                        as.sys.bootstrapAlert("Укажите пожалуйста роли", { type: 'warning' });
                        return;
                    }
                    if (!newIsFinish) {
                        as.sys.bootstrapAlert("Укажите пожалуйста результат", { type: 'warning' });
                        $('.NewItemIsFinish').focus();
                        return;
                    }
                    
                    var params = {
                        name: newName,
                        processID: newProcessID,
                        ord: newOrd,
                        roles: newRoles,
                        users: newUsers,
                        desc: newDesc,
                        isFinish: newIsFinish,
                        color: newColor
                    };

                    as.sys.ajaxSend("/Admin/ProcessItemCreate", params, function(data) {
                        if (typeof (data) != "object") data = eval('(' + data + ')');
                        if (data.result) {
                            as.sys.bootstrapAlert("Элемент сохранен", { type: 'success' });
                            as.sys.closeDialog();
                            as.crud.getItems();
                            setTimeout(function() {
                                as.crud.gotoItem(data.textID);
                            }, 1000);
                        } else {
                            as.sys.bootstrapAlert(data.msg || "Возникли ошибки при выполнении операции!", { type: 'danger' });
                        }
                    });
                }, false, function() {
                    $('#NewUsers').editable({
                        source: usersSource,
                        emptytext: "Выбрать"
                    });
                });
            }
        }
        $(function() {
            asdemo.init();
        });
    </script>
}



