@using arkAS.Models;
@{
    Layout = arkAS.BLL.Core.CoreManager.GetCabinetLayout();
    ViewBag.Title = "Метрики";
    var js = new System.Web.Script.Serialization.JavaScriptSerializer();
}
<style type="text/css">
    .crdTo {
        background: url('/Content/images/icon1.png') no-repeat 0 0;
        display: inline-block;
        width: 16px;
        height: 16px;
    }

    .changePass {
        display: inline-block;
        width: 16px;
        height: 16px;
    }

    .usRolesItem {
        display: inline-block;
        font-size: 12px;
    }

</style>

<div class='usMetricsTemplate hide'>
    @foreach (var item in Roles.GetAllRoles())
    {
        <div class="usRolesItem">
            <input type="checkbox" value='@item' id='svOurSup@(item)' /><label for='svOurSup@(item)'>@item</label>@Html.Raw("&nbsp; &nbsp; &nbsp; &nbsp;")
        </div>
    }
</div>

<select class='usParentTemplate hide'>
    <option value="0">Не выбрано</option>
    @foreach (var item in (List<arkAS.BLL.as_mt_metrics>)ViewBag.parentName)
    {
        <option value='@item.id'>@item.title</option>
    }
</select>
<select class='usMetricTypeTemplate hide'>
    <option value="0">Не выбрано</option>
    @foreach (var item in (List<arkAS.BLL.as_mt_metricTypes>)ViewBag.metricTypetName)
    {
        <option value='@item.id'>@item.name</option>
    }
</select>


<div class='usCont'>
</div>

@section js{
    <script type="text/javascript">

        var metrics = @Html.Raw(js.Serialize(((List<arkAS.BLL.as_mt_metrics>)(ViewBag.parentName)).Select(x => new { value = x.id, text = x.title })));
        var metricsType = @Html.Raw(js.Serialize(((List<arkAS.BLL.as_mt_metricTypes>)(ViewBag.metricTypetName)).Select(x => new { value = x.id, text = x.name })));

        var us = {
            init: function () {
                us.initMainTable();
                $(document).delegate('.usCreateMetric', 'click', function (e) {
                    e.preventDefault();
                    us.createMetric();
                });
                $(document).delegate('.usCont .usMetricRoles input[type=checkbox]', 'change', function (e) {
                    e.preventDefault();
                    var tr= $(this).closest('tr');
                    var params = {
                        pk: $('td[data-code=id]', tr).text(),
                        value: $(this).val() + "=" + $(this).is(":checked"), //turnON
                        name: "roles"
                    };
                    as.sys.ajaxSend("/Admin/MetricsInline", params, function (data) {
                        if (typeof (data) != "object") data = eval('(' + data + ')');

                        if (data.result) {
                            as.sys.bootstrapAlert("Роль изменена", { type: 'success' });                    
                        } else {
                            as.sys.bootstrapAlert("Возникли ошибки при выполнении операции!", { type: 'danger' });
                        }
                    });
                });
                $(document).delegate('.usCont .usMetricisSP', 'change', function (e) {
                    e.preventDefault();
                    var tr= $(this).closest('tr');
                    var params = {
                        pk: $('td[data-code=id]', tr).text(),
                        value: $(this).is(":checked"), //turnON
                        name: "isSP"
                    };
                    as.sys.ajaxSend("/Admin/MetricsInline", params, function (data) {
                        if (typeof (data) != "object") data = eval('(' + data + ')');

                        if (data.result) {
                            as.sys.bootstrapAlert("Флаг хранимой процедуры изменен", { type: 'success' });                    
                        } else {
                            as.sys.bootstrapAlert("Возникли ошибки при выполнении операции!", { type: 'danger' });
                        }
                    });
                });
            },
            initMainTable: function () {
                as.crud.init({
                    cont: $('.usCont'),
                    title: 'Метрики',
                    toolbarAdditional: '<a href="#" class="btn btn-primary usCreateMetric">Создать новую метрику</a>',
                    groupOperationsToolbar: '',
                    ajaxURLFormat: '/Admin/Metrics_{0}',
                    inlineAjaxURL: "/Admin/MetricsInline",
                    pageSize: 150,
                    cookiePrefix: "as-crud-metricsTable-",
                    emptyText: 'Нет метрик',
                    createLinkTitle: 'Создать',
                    filterLinkTitle: 'Найти',
                    filterTitle: 'Фильтрация данных',
                    showChecksCol: false,
                    showNumsCol: false,
                    showToolbar: true,
                    showColSettings: false,
                    showReplaceTool: false,
                    showExcelExport: false,
                    additionalSort: false,
                    cols: [
                        { code: "id", title: "ID", tooltip: "Идентификатор", isVisible: false, isPK: true, datatype: "int", isRequired: false },
                        {
                            code: "title", title: "Название", tooltip: "Название метрики", isVisible: true, isPK: false, datatype: "textarea", isRequired: false, format: "{0}", isSort: false,
                            editable: { type: "textarea", format: "{0}", callback: function (el, newValue) { }} 
                        },
                        {
                            code: "subtitle", title: "Описание", tooltip: "Дополнительная информация", isVisible: true, isPK: false, datatype: "textarea", isRequired: false, format: "{0}", isSort: false,
                            editable: { type: "textarea", format: "{0}", callback: function (el, newValue) { } }
                        },
                        {
                            code: "sql", title: "SQL", tooltip: "Запрос к базе или хранимая процедура ", isVisible: true, isPK: false, datatype: "textarea", isRequired: false, format: "{0}", isSort: false,
                            editable: { type: "textarea", format: "{0}", callback: function (el, newValue) { } }
                        },
                        {
                            code: "parName", title: "Параметры", tooltip: "Параметры", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: false,
                            editable: { type: "text", format: "{0}", callback: function (el, newValue) { } }
                        },
                        {
                            code: "parentName", title: "Родительский пункт", tooltip: "Родительский пункт", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: false,
                            editable: { type: "select",source:metrics, format: "{0}", callback: function (el, newValue) { } }
                        },
                        { 
                            code: "typeName", title: "Тип метрики", tooltip: "Тип метрики", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: false,
                            editable: { type: "select",source:metricsType, format: "{0}", callback: function (el, newValue) { } }
                        },
                        {
                            code: "users", title: "Пользователи", tooltip: "Логины пользователей", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: false,
                            editable: { type: "text", format: "{0}", callback: function (el, newValue) { } }
                        },
                        { code: "roles", title: "Роли", tooltip: "Роли", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: false, callback: null },
                        {
                            code: "ord", title: "Сортировка", tooltip: "Порядок сортировки (меньше число - выше уровень)", isVisible: true, isPK: false, datatype: "int", isRequired: false, format: "{0}", isSort: false,
                            editable: { type: "number", format: "{0}", min: "0", callback: function (el, newValue) { } }
                        },
                        { code: "isSP", title: "Хран. процедура", tooltip: "Флаг хранимой процедуры", isVisible: true, isPK: false, datatype: "bool", isRequired: false, format: "{0}", isSort: false, callback: null }
                    ],
                    operations: {
                        create: false,
                        remove: true,
                        edit: false,
                        other: []
                    },
                    getFilterMakeup: function (filter) {
                        var s = [];
                        s.push("<span class='gCap'>Название метрики</span><input type='text' class='usMetricname' value='" + (filter.metricname || '') + "' /><br /><br />");

                        $('.usMetricsTemplate input').removeAttr('checked');
                        if (filter.roles) {
                            $.each(filter.roles, function (i, item) {
                                $('.usMetricsTemplate input[value=' + item + ']').attr('checked', 'checked');
                            })
                        }
                        s.push("<span class='gCap'>Роли</span><div class='usMetrics'>" + $('.usMetricsTemplate').html() + "</div><br /><br />");

                        return s.join("");
                    },
                    filter: function () {
                        var roles = [];
                        $('.usMetrics input:checked').each(function () {
                            roles.push($(this).attr('value'));
                        });

                        var filter = {
                            metricname: $('.usMetricname').val() || "",
                            roles: roles
                        };
                        return filter;
                    },
                    getItemsCallback: function () {
                        $('.usCont .usMetricRoles').each(function () {
                            var roles = ("," + $(this).text() + ",").split(",");
                            $('.usMetricsTemplate input').removeAttr("checked");
                            $('.usMetricsTemplate input').each(function () {
                                if ($.inArray($(this).val(), roles) >= 0) {
                                    $(this).attr("checked", "checked");
                                }
                            });
                            $(this).html($('.usMetricsTemplate').html());
                        });
                    }
                });
            },
            createMetric: function () {
                var s = [];
                s.push("<span>Название</span><textarea class='form-control usTitleMetric' rows = '5' cols = '70'/><br />");
                s.push("<span>Описание</span>​<textarea class='form-control usSubTitleMetric' rows = '5' cols = '70'/><br />");
                s.push("<span>SQL</span>​<textarea class='form-control usSqlMetric' rows = '5' cols = '70' /><br />");
                $('.usParentTemplate option').removeAttr('selected');
                $('.usParentTemplate option:first').attr('selected', 'selected');
                s.push("<span>Родительский пункт меню</span><select class='form-control usNewParentID' >" + $('.usParentTemplate').html() + "</select><br />");
                $('.usMetricTypeTemplate option').removeAttr('selected');
                $('.usMetricTypeTemplate option:first').attr('selected', 'selected');
                s.push("<span>Тип метрики</span><select class='form-control usMetricTypeID' >" + $('.usMetricTypeTemplate').html() + "</select><br />");
                s.push("<span>Хран. процедура  </span><input type='checkbox' class='usIsSPMetric' /><br />");

                setTimeout(function () { $('.usNewUserLogin').focus(); }, 200);
                as.sys.showDialog("Новая метрика", s.join(""), "Создать метрику", function () {
                    var title = $('.usTitleMetric').val();
                    var subtitle = $('.usSubTitleMetric').val();
                    var sql = $('.usSqlMetric').val();
                    var parentID = $('.usNewParentID option:selected').val();
                    var metricTypeID = $('.usMetricTypeID').val();
                    var isSP = $('.usIsSPMetric').val();

                    if (!title) {
                        as.sys.bootstrapAlert("Укажите пожалуйста название", { type: 'warning' });
                        $('.usNewUserLogin').focus();
                        return;
                    }
                    if (!sql) {
                        as.sys.bootstrapAlert("Укажите пожалуйста запрос к базе или хранимую процедуру", { type: 'warning' });
                        $('.usNewUserPassword').focus();
                        return;
                    }

                    var params = { title: title, subtitle: subtitle, sql: sql, parentID: parentID, metricTypeID: metricTypeID };
                    as.sys.ajaxSend("/Admin/CreateMetric", params, function (data) {
                        if (typeof (data) != "object") data = eval('(' + data + ')');

                        if (data.result) {
                            as.sys.bootstrapAlert("Метрика успешно создана", { type: 'success' });
                            as.sys.closeDialog();
                            as.crud.getItems();
                            setTimeout(function () {
                                as.crud.gotoItem(data.guid);
                            }, 1000);
                        } else {
                            as.sys.bootstrapAlert(data.msg || "Возникли ошибки при выполнении операции!", { type: 'danger' });
                        }
                    });
                });



            },

        }
        $(function () {
            metrics.unshift({"value":"","text":"Значение не задано"});
            us.init();
        });
    </script>
}