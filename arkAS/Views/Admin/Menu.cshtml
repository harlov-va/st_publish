@using arkAS.Models;
@{
    Layout = arkAS.BLL.Core.CoreManager.GetCabinetLayout();
    ViewBag.Title = "Меню";    
    var js = new System.Web.Script.Serialization.JavaScriptSerializer();
}
<style type="text/css">
    .usRolesItem {
        display:inline-block;
        font-size:12px;
    }
</style>
<select class='usParentTemplate hide'>
    <option value="0">Не выбрано</option>
    @foreach (var item in (List<arkAS.BLL.as_menu>)ViewBag.parentName)
    {
        <option value='@item.id'>@item.name</option>
    }
</select>

<div class='usRolesTemplate hide'>

    @foreach (var item in Roles.GetAllRoles())
    {
        <div class="usRolesItem">
            <input type="checkbox" value='@item' id='svOurSup@(item)' /><label for='svOurSup@(item)'>@item</label>@Html.Raw("&nbsp; &nbsp; &nbsp; &nbsp;")
        </div>        
    }
</div>

<div class='usCont'>
</div>
@section js{
<script type="text/javascript">
var parentNameSource = @Html.Raw(js.Serialize(((List<arkAS.BLL.as_menu>)ViewBag.parentName).Select(x => new { value = x.id, text = x.name })));
   
var us = {
    init: function () {
        us.initMainTable();
        $(document).delegate('.usCreateMenu', 'click', function (e) {
            e.preventDefault();
            us.createMenu();
        });     
        $(document).delegate('.usCont .usMenuRoles input[type=checkbox]', 'change', function (e) {
            e.preventDefault();
            var tr= $(this).closest('tr');
            var params = {
                //userGuid: tr.attr('data-itemID'),
                role: $(this).val(),
                itemID: $('td[data-code=id]', tr).text(),
                turnOn: $(this).is(":checked")
            };
            as.sys.ajaxSend("/Admin/ChangeMenuRole", params, function (data) {
                if (typeof (data) != "object") data = eval('(' + data + ')');

                if (data.result) {
                    as.sys.bootstrapAlert("Роль изменена", { type: 'success' });                    
                } else {
                    as.sys.bootstrapAlert("Возникли ошибки при выполнении операции!", { type: 'danger' });
                }
            });
        });
    },
    initMainTable: function () {
        as.crud.init({
            cont: $('.usCont'),
            title: 'Пункты меню',
            toolbarAdditional: '<a href="#" class="btn btn-primary usCreateMenu">Создать пункт меню</a>',
            groupOperationsToolbar: '',
            ajaxURLFormat: '/Admin/Menu_{0}',
            inlineAjaxURL: "/Admin/MenuInline",
            pageSize: 150,
            cookiePrefix: "as-crud-menuTable-",
            emptyText: 'Меню не задано',
            createLinkTitle: 'Создать',
            filterLinkTitle: 'Найти',
            filterTitle: 'Фильтрация данных',
            showChecksCol: false,
            showNumsCol: true,
            showToolbar: true,
            showColSettings: false,
            showReplaceTool: false,
            showExcelExport: false,
            additionalSort: false,
            cols: [
                { code: "id", title: "ID", tooltip: "Идентификатор", isVisible: false, isPK: true, datatype: "int", isRequired: false },
                {
                     code: "name", title: "Название", tooltip: "Название", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: true, callback: null,
                     editable: { type: "text", format: "{0}", callback: function (el, newValue) { } }
                },
                {
                    code: "url", title: "URL", tooltip: "URL", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: true, callback: null,
                    editable: { type: "text", format: "{0}", callback: function (el, newValue) { } }
                },
                {
                    code: "parentName", title: "Родительский пункт меню", tooltip: "Родительский пункт меню", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: true, callback: null,
                    editable: { type: "select", format: "{0}", source: parentNameSource, callback: function (el, newValue) { } }
                },
                {
                    code: "pattern", title: "Шаблон", tooltip: "Шаблон", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: true, callback: null,
                    editable: { type: "text", format: "{0}", callback: function (el, newValue) { } }
                },
                { code: "roles", title: "Роли", tooltip: "Роли", isVisible: true, isPK: false, datatype: "string", isRequired: false, format: "{0}", isSort: false, callback: null},
                
            ],
            operations: {
                create: false,
                remove: true,
                edit: false,
                other: [
                ]
            },
            getFilterMakeup: function (filter) {
                var s = [];
                s.push("<span class='gCap'>Текст</span><input type='text' class='usText' value='" + (filter.text || '') + "' /><br /><br />");
                               
                $('.usParentTemplate option').removeAttr('selected');
                $('.usParentTemplate option[value=' + filter.parentID + ']').attr('selected', 'selected');
                s.push("<span class='gCap'>Родительский пункт меню</span><select class='usParent'>" + $('.usParentTemplate').html() + "</select><br /><br />");

                $('.usRolesTemplate input').removeAttr('checked');
                if (filter.roles) {
                    $.each(filter.roles, function (i, item) {
                        $('.usRolesTemplate input[value=' + item + ']').attr('checked', 'checked');
                    })
                }
                s.push("<span class='gCap'>Роли</span><div class='usRoles'>" + $('.usRolesTemplate').html() + "</div><br /><br />");

                return s.join("");
            },
            filter: function () {

                var roles = [];
                $('.usRoles input:checked').each(function () {
                    roles.push($(this).attr('value'));
                });
               
                var filter = {
                    text: $('.usText').val() || "",
                    parentID: $('.usParent option:selected').val(),
                    roles:roles
                };
                return filter;
            },
            getItemsCallback: function () {
                $('.usCont .usMenuRoles').each(function () {
                    var roles = ("," + $(this).text() + ",").split(",");                    
                    $('.usRolesTemplate input').removeAttr("checked");
                    $('.usRolesTemplate input').each(function () {
                        if ($.inArray($(this).val(), roles)>=0) {
                            $(this).attr("checked","checked");
                        }
                    });
                    $(this).html($('.usRolesTemplate').html());
                });
            }
        });
    },
    createMenu: function () {
        var s = [];
        s.push("<span>Название</span><input type='text' class='form-control usNewName' /><br />");
        s.push("<span>URL</span><input type='text' class='form-control usNewUrl' /><br />");
        s.push("<span>Шаблон</span><input type='text' class='form-control usNewPattern' /><br />");

        $('.usParentTemplate option').removeAttr('selected');
        $('.usParentTemplate option:first').attr('selected', 'selected');        
        s.push("<span>Родительский пункт меню</span><select class='form-control usNewParentID' >"+ $('.usParentTemplate').html() + "</select><br />");
        
        setTimeout(function () { $('.usNewName').focus(); }, 200);
        as.sys.showDialog("Новый пункт меню", s.join(""), "Создать меню", function () {
            var name = $('.usNewName').val();
            var url = $('.usNewUrl').val();
            var pattern = $('.usNewPattern').val();
            var parentID = $('.usNewParentID option:selected').val();
            
            if (!name) {
                as.sys.bootstrapAlert("Укажите, пожалуйста, название", { type: 'warning' });
                $('.usNewName').focus();
                return;
            }
            if (!url) {
                as.sys.bootstrapAlert("Укажите, пожалуйста, url ", { type: 'warning' });
                $('.usNewUrl').focus();
                return;
            }
            
            var params = { name: name, url: url, pattern: pattern, parentID: parentID };
            as.sys.ajaxSend("/Admin/CreateMenu", params, function (data) {
                if (typeof (data) != "object") data = eval('(' + data + ')');
                if (data.result) {
                    as.sys.bootstrapAlert("Пункт меню успешно создан", { type: 'success' });
                    as.sys.closeDialog();
                    as.crud.getItems();
                    setTimeout(function () {
                        as.crud.gotoItem(data.settingID);
                    }, 1000);
                } else {
                    as.sys.bootstrapAlert(data.msg || "Возникли ошибки при выполнении операции!", { type: 'danger' });
                }
            });
        });
    },    
    editValue: function(el){
        
        var tr = el.closest("tr");        
        as.sys.showDialog($("td[data-code=name]", tr).text() + " ("+$("td[data-code=url]", tr).text()+ " ("+$("td[data-code=pattern]", tr).text()+")", s.join(""), "Сохранить", function () {            
            as.sys.ajaxSend("/Admin/MenuInline", params, function (data) {
                if (typeof (data) != "object") data = eval('(' + data + ')');
                if (data.result) {
                    as.sys.bootstrapAlert("Сохранено", { type: 'success' });
                    as.sys.closeDialog();        
                } else {
                    as.sys.bootstrapAlert(data.msg || "Возникли ошибки при выполнении операции!", { type: 'danger' });
                }
            });
        });
    }
}
$(function () {
    us.init();
});
</script>
}